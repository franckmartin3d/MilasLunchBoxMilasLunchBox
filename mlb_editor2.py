#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Jul 02, 2018 05:48:51 PM

import sys

# Mila's lunchbox recipe feature


import jsonpickle


# -----------------------------------------> CLASS <--------------------------------------------------------------------

# recipe object
class Recipe(object):
    """Creating recipes object"""
    total = 0

    # list of instance objects
    rlist = []
    breakfastList = []
    lunchList = []
    dinnerList = []

    # Create an instance user input
    @staticmethod
    def userinstance():
        print("Creating a recipe instance")
        recepi_instance = input("What is the recepi title?:\n")

        recepi_instance = Recipe(recepi_instance, input("Enter your recipe ingredient: \n"),
                                 input("Enter your recipe instruction: \n"), input("Enter your recipe Type: \n"))
        print("--RECEPI CREATED--")
        pressEnter()
        return recepi_instance

    # Update how many there is
    @staticmethod
    def status():
        print("\nThe total number of recepi is ", Recipe.total)

    # Attribute of the class title ingredient instruction, type
    def __init__(self, title, ingredient, instruction, type):
        self.title = title
        self.ingredient = ingredient
        self.instruction = instruction
        self.type = type
        Recipe.total += 1

        # Add to All List
        Recipe.rlist.append(self)

        # Add to breakfast list:
        if self.type == "breakfast" or self.type == "Breakfast":
            Recipe.breakfastList.append(self)

        # Add to Lunch list :
        elif self.type == "lunch" or self.type == "Lunch":
            Recipe.lunchList.append(self)

        # Add to dinner list
        else:
            Recipe.dinnerList.append(self)

    # Display the object when using print
    def __str__(self):
        # rep = Recipes
        rep = str.upper(self.title) + " \n\n"
        rep += "ingredient: \n" + self.ingredient + " \n\n"
        rep += "instruction: \n" + self.instruction + " \n\n"
        rep += "Type: \n" + self.type + " \n\n"
        return rep

    # Display the object method
    def display(self):
        print("Title: \n\n" + self.title, "\n")
        print("Ingredient: \n\n" + self.ingredient + " \n")
        print("Instruction: \n\n" + self.instruction + " \n")

    # Edit methods
    def changeTitle(self):
        newtitle = input("Change title from", self.title, "to: \n")

        if newtitle == "":
            print("Recepie needs a title")
        else:
            self.title = newtitle

    def changeIngredient(self):
        newtitle = input("Change ingredient from", self.ingredient, "to: \n")

        if newtitle == "":
            print("Recepie needs ingredient")
        else:
            self.ingredient = newtitle


# -------------------------------------------> Save/load Functions <----------------------------------------------------

# load the data from json file (rlist objects)
def load_rlist():
    with open("rlist.json", "r") as file:
        contents = file.read()
        Recipe.rlist = jsonpickle.decode(contents)
        print("loaded data from rlist.json")


# Save data object
def data_rlist():
    print("saving")
    with open("rlist.json", "w") as file:
        fileobject = jsonpickle.encode(Recipe.rlist)
        file.write(fileobject)



# press enter to continue
def pressEnter():
    """Press enter to continue"""
    try:
        input("\nPress enter to continue")
    #   print("\n" * 15)
    except SyntaxError:
        pass


# clear IDLE
def clear():
    print("\n" * 15)
    print("===========================================================================================================")


# -----------------------------------------> Display recipe list functions <--------------------------------------------


# List of all
def recepilist():
    """Display all recepi"""

    print("\t---RECEPI---")
    for i, val in enumerate(Recipe.rlist):
        print("\t", i, val.title)


# breakfast list
def breakfastList():
    """Display breakfast recepi"""

    print("\t---Breakfast RECEPI---")
    for i, val in enumerate(Recipe.breakfastList):
        print("\t", i, val.title)


# lunch list
def lunchList():
    """Display lunch recepi"""

    print("\t---LUNCH RECEPI---")
    for i, val in enumerate(Recipe.lunchList):
        print("\t", i, val.title)


# dinner list
def dinnerList():
    """Display Dinner recepi"""
    print("\t---Dinner RECEPI---")
    for i, val in enumerate(Recipe.dinnerList):
        print("\t", i, val.title)


# ----------------------------------------------------> Menu/Type <----------------------------------------------------
#
#
# # Type submenu to select the typw recipe
# def typeSubmenu():
#     """Submenu to select the type of recipe"""
#
#     typeChoice = None
#
#     while typeChoice != "0":
#         print("""
#
#         RECEPI TYPE TO DISPLAY
#
#         1 - Breakfast.
#         2 - Lunch.
#         3 - Dinner.
#         0 - Back to main menu
#
#
#                 """)
#
#         typeChoice = input("Select: \n")
#
#         if typeChoice == "1":
#             print("All AVAILABLE BREAKFAST RECEPI\n")
#             listID = "b"
#             breakfastList()
#             displaymenu('b', "typeSubmenu")
#
#         elif typeChoice == "2":
#             print("All AVAILABLE LUNCH RECEPI\n")
#             listID = "l"
#             lunchList()
#             displaymenu('l', "typeSubmenu")
#
#
#         elif typeChoice == "3":
#             print("All AVAILABLE DINNER RECEPI\n")
#             listID = "d"
#             dinnerList()
#             displaymenu('d', "typeSubmenu")
#
#
#         elif typeChoice == "0":
#             print("Loading Main Menu\n")
#             clear()
#             menuPrincipal()
#
#         else:
#             print("Input invalide choose 1-4 or 0")
#
#     position = "typeSubmenu"
#     return position
#

# # --------------------------------------> Menu/ Display <---------------------------------------------------------------
#
#
# # Display after a list
# def displaymenu(listID, position):
#     """Selection Main Menu"""
#
#     choice = None
#
#     while choice != "0":
#         print("""
#
#
#         ############################
#         # 1 - Select a Recipe      #
#         # 0 - Back to Last Menu    #
#         ############################
#
#         """)
#         choice = input("Choice:\n ")
#         if choice == "1":
#             recepiIndex = int(input("Display the following recipe: (#)\n "))
#
#             # Breakfast list menu
#             if listID == "b":
#                 if recepiIndex in range(len(Recipe.breakfastList)):
#                     recepi_instance = Recipe.breakfastList[recepiIndex]
#                     recepi_instance.display()
#                 else:
#                     print("\nINVALID SELECTION\nLOADING MAIN MENU!")
#                     clear()
#                     menuPrincipal()
#
#
#             # All list menu
#             elif listID == "a":
#                 if recepiIndex in range(len(Recipe.rlist)):
#                     recepi_instance = Recipe.rlist[recepiIndex]
#                     recepi_instance.display()
#                 else:
#                     print("\nINVALID SELECTION\nLOADING MAIN MENU!")
#                     clear()
#                     menuPrincipal()
#
#             # Lunch list menu
#             elif listID == "l":
#                 if recepiIndex in range(len(Recipe.lunchList)):
#                     recepi_instance = Recipe.lunchList[recepiIndex]
#                     recepi_instance.display()
#                 else:
#                     print("\nINVALID SELECTION\nLOADING MAIN MENU!")
#                     clear()
#                     menuPrincipal()
#
#             # Lunch list menu
#             elif listID == "d":
#                 if recepiIndex in range(len(Recipe.dinnerList)):
#                     recepi_instance = Recipe.dinnerList[recepiIndex]
#                     recepi_instance.display()
#                 else:
#                     print("\nINVALID SELECTION\nLOADING MAIN MENU!")
#                     clear()
#                     menuPrincipal()
#
#
#         elif choice == "0":
#
#             # return to type submenu
#             if position == "typeSubmenu":
#                 typeSubmenu()
#
#             # return to main menu
#             elif position == "mainmenu":
#                 menuPrincipal()
#
#         else:
#             print("Input invalide choose 1 or 0")
#
#     position = "displaymenu"
#     return position
#

# ----------------------------------------------------> the edit recipe menu <------------------------------------------
# def editmenu():
#     """ Edit Menu"""
#
#     selection = None
#
#     while selection != "0":
#         print("""
#
#             EDIT MAIN MENU
#
#             1 - Display All Recipe to edit
#             0 - Exit
#             """)
#
#         selection = input("Select: \n")
#
#         if selection == "1":
#             print("Here Are all the Recipe Available to Edit!\n")
#             recepilist()
#             recepiIndex = int(input("What recipe do you want to Edit: # "))
#
#             if recepiIndex in range(len(Recipe.rlist)):
#                 recepi_instance = Recipe.rlist[recepiIndex]
#                 recepi_instance.display()
#
#                 print("debug here")
#
#                 editRecepi(recepi_instance)
#                 return recepi_instance
#             else:
#                 print("\nINVALID SELECTION\nLOADING MAIN MENU!")
#
#     position = "editmenu"
#     return
#
#
# # -------------------------------------------------------> edit what type menu <----------------------------------------
# # type of attribute to edit
# def editRecepi(recepi_instance):
#     """Edit a recepie"""
#     selection = None
#
#     while selection != "0":
#         print("""
#
#         EDIT SECTION
#
#         1 - Title
#         2 - Ingredient
#         3 - Instruction
#         4 - Type
#         0 - Back to mainmenu
#                 """)
#
#         selection = input("Select: \n")
#
#         # replce title
#         if selection == "1":
#             recepi_instance.title = input("Changing title from " + recepi_instance.title + " to :\n")
#
#             print("Title is now:", recepi_instance.title)
#
#         # replace Ingredient
#         elif selection == "2":
#             recepi_instance.ingredient = input("Changing ingredient from " + recepi_instance.ingredient + " to :\n")
#
#             print("Ingedient is now:", recepi_instance.ingredient)
#
#         # replace Instruction
#         elif selection == "3":
#             recepi_instance.instruction = input("Changing Instruction from " + recepi_instance.instruction + " to :\n")
#
#             print("instruction is now:", recepi_instance.instruction)
#
#         # replace type
#         elif selection == "4":
#             recepi_instance.type = input("Changing type from " + recepi_instance.type + " to :\n")
#
#             print("type is now:", recepi_instance.type)
#
#         else:
#             menuPrincipal()
#
#
# # -------------------------------------------------> MAIN MENU <--------------------------------------------------------
#
# def menuPrincipal():
#     """Main menu"""
#     selection = None
#
#     while selection != "0":
#         print("""
#
#         RECEPI MAIN MENU
#
#         1 - List all Recipe
#         2 - List by Type
#         3 - Add new Recipe
#         4 - Edit a Recipe
#         5 - debug display saved data
#         0 - Exit
#         """)
#
#         selection = input("Select: \n")
#
#         if selection == "1":
#             print("Here Are all the Recipe Available!\n")
#             # print(Recipe.rlist)
#             clear()
#             recepilist()
#             displaymenu("a", "mainmenu")
#
#         elif selection == "2":
#             # print("Display Recepi Sub-Menu\n")
#             clear()
#             typeSubmenu()
#
#         elif selection == "3":
#             print("Add a new recipe!")
#             clear()
#             Recipe.userinstance()
#
#         elif selection == "4":
#             print("Edit recipe")
#             editmenu()
#
#         elif selection == "5":
#             print("Saved data")
#             data_rlist()
#
#         elif selection == "0":
#             print("Quiting Recipe Main...")
#
#         else:
#             print("Input invalid choose 1-4 or 0")
#
#     position = "mainmenu"
#     return position


# -----------------------------------------------> Default test recipe <------------------------------------------------

# Test Recipe
# testDinner1 = Recipe("test Spaghetti", "Pasta, Tomato, Sauce, mince", "1:boil pasta 2:do the sauce","dinner" )
# testDinner2 = Recipe("test Penne romanov", "Pasta, Tomato, Sauce, mince", "1:boil pasta 2:do the sauce","dinner" )
#
# testBreakfast1 = Recipe("test Oat_Bowl", "Oat , Milk", "1: Put oat on stove\n2: pour milk in it \n3:wait until bubles", "Breakfast")
# testBreakfast2 = Recipe("test toast", "bread, peanut butter", "1: toat the bread 2: spread the pb","breakfast")
#
# testLunch2 = Recipe("test sandwich", "bread ham salami mayo", "Do the sanwich", "lunch")
# testLunch1 = Recipe("KD", "milk & KD", "do the kd", "lunch")

# --------------------------------------------------> Main <------------------------------------------------------------

# # Load data from json file
# load_rlist()
#
# # load main menu
# menuPrincipal()
#
# # save recipe objects
# data_rlist()




#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Jul 03, 2018 04:13:31 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import mlb_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    mlb_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    mlb_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'

        top.geometry("600x450+650+150")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Frame_button = Frame(top)
        self.Frame_button.place(relx=0.02, rely=0.04, relheight=0.5
                , relwidth=0.41)
        self.Frame_button.configure(relief=GROOVE)
        self.Frame_button.configure(borderwidth="2")
        self.Frame_button.configure(relief=GROOVE)
        self.Frame_button.configure(background="#d9d9d9")
        self.Frame_button.configure(highlightbackground="#d9d9d9")
        self.Frame_button.configure(highlightcolor="black")
        self.Frame_button.configure(width=245)

        self.fra38_but39 = Button(self.Frame_button)
        self.fra38_but39.place(relx=0.08, rely=0.42, height=30, width=200)
        self.fra38_but39.configure(activebackground="#277ad8")
        self.fra38_but39.configure(activeforeground="white")
        self.fra38_but39.configure(activeforeground="#000000")
        self.fra38_but39.configure(background="#97d8a6")
        self.fra38_but39.configure(command=mlb_support.recepilist())
        self.fra38_but39.configure(compound="center")
        self.fra38_but39.configure(disabledforeground="#a3a3a3")
        self.fra38_but39.configure(foreground="#000000")
        self.fra38_but39.configure(highlightbackground="#d9d9d9")
        self.fra38_but39.configure(highlightcolor="black")
        self.fra38_but39.configure(pady="0")
        self.fra38_but39.configure(text='''List all Recipe''')
        self.fra38_but39.configure(width=282)

        self.Lb_numb = Label(self.Frame_button)
        self.Lb_numb.place(relx=0.08, rely=0.09, height=21, width=99)
        self.Lb_numb.configure(activebackground="#f9f9f9")
        self.Lb_numb.configure(activeforeground="black")
        self.Lb_numb.configure(background="#d9d9d9")
        self.Lb_numb.configure(disabledforeground="#a3a3a3")
        self.Lb_numb.configure(foreground="#000000")
        self.Lb_numb.configure(highlightbackground="#d9d9d9")
        self.Lb_numb.configure(highlightcolor="black")
        self.Lb_numb.configure(text='''Number of recepi''')

        self.Text2 = Text(self.Frame_button)
        self.Text2.place(relx=0.16, rely=0.18, relheight=0.11, relwidth=0.22)
        self.Text2.configure(background="white")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(width=54)
        self.Text2.configure(wrap=WORD)

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.63, rely=0.87, relheight=0.1, relwidth=0.33)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")
        self.Frame2.configure(width=195)

        self.button_save = Button(self.Frame2)
        self.button_save.place(relx=0.05, rely=0.22, height=24, width=84)
        self.button_save.configure(activebackground="#d9d9d9")
        self.button_save.configure(activeforeground="#000000")
        self.button_save.configure(background="#d9d9d9")
        self.button_save.configure(disabledforeground="#a3a3a3")
        self.button_save.configure(foreground="#000000")
        self.button_save.configure(highlightbackground="#d9d9d9")
        self.button_save.configure(highlightcolor="black")
        self.button_save.configure(pady="0")
        self.button_save.configure(text='''save''')

        self.Button3 = Button(self.Frame2)
        self.Button3.place(relx=0.56, rely=0.22, height=24, width=69)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''exit''')

        self.Fr_add = Frame(top)
        self.Fr_add.place(relx=0.02, rely=0.56, relheight=0.3, relwidth=0.96)
        self.Fr_add.configure(relief=GROOVE)
        self.Fr_add.configure(borderwidth="2")
        self.Fr_add.configure(relief=GROOVE)
        self.Fr_add.configure(background="#d9d9d9")
        self.Fr_add.configure(highlightbackground="#d9d9d9")
        self.Fr_add.configure(highlightcolor="black")
        self.Fr_add.configure(width=575)

        self.lb_am = Label(self.Fr_add)
        self.lb_am.place(relx=0.02, rely=0.07, height=21, width=62)
        self.lb_am.configure(activebackground="#f9f9f9")
        self.lb_am.configure(activeforeground="black")
        self.lb_am.configure(background="#d9d9d9")
        self.lb_am.configure(disabledforeground="#a3a3a3")
        self.lb_am.configure(foreground="#000000")
        self.lb_am.configure(highlightbackground="#d9d9d9")
        self.lb_am.configure(highlightcolor="black")
        self.lb_am.configure(text='''Add Menu''')

        self.Lb_title = Label(self.Fr_add)
        self.Lb_title.place(relx=0.02, rely=0.22, height=21, width=34)
        self.Lb_title.configure(activebackground="#f9f9f9")
        self.Lb_title.configure(activeforeground="black")
        self.Lb_title.configure(background="#d9d9d9")
        self.Lb_title.configure(disabledforeground="#a3a3a3")
        self.Lb_title.configure(foreground="#000000")
        self.Lb_title.configure(highlightbackground="#d9d9d9")
        self.Lb_title.configure(highlightcolor="black")
        self.Lb_title.configure(text='''Title:''')

        self.ent_title = Entry(self.Fr_add)
        self.ent_title.place(relx=0.02, rely=0.37,height=20, relwidth=0.32)
        self.ent_title.configure(background="white")
        self.ent_title.configure(disabledforeground="#a3a3a3")
        self.ent_title.configure(font="TkFixedFont")
        self.ent_title.configure(foreground="#000000")
        self.ent_title.configure(highlightbackground="#d9d9d9")
        self.ent_title.configure(highlightcolor="black")
        self.ent_title.configure(insertbackground="black")
        self.ent_title.configure(selectbackground="#c4c4c4")
        self.ent_title.configure(selectforeground="black")

        self.lb_ingredient = Label(self.Fr_add)
        self.lb_ingredient.place(relx=0.02, rely=0.52, height=21, width=63)
        self.lb_ingredient.configure(activebackground="#f9f9f9")
        self.lb_ingredient.configure(activeforeground="black")
        self.lb_ingredient.configure(background="#d9d9d9")
        self.lb_ingredient.configure(disabledforeground="#a3a3a3")
        self.lb_ingredient.configure(foreground="#000000")
        self.lb_ingredient.configure(highlightbackground="#d9d9d9")
        self.lb_ingredient.configure(highlightcolor="black")
        self.lb_ingredient.configure(text='''Ingredient:''')

        self.Entry2 = Entry(self.Fr_add)
        self.Entry2.place(relx=0.02, rely=0.67,height=40, relwidth=0.32)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")

        self.Lb_instruction = Label(self.Fr_add)
        self.Lb_instruction.place(relx=0.38, rely=0.22, height=21, width=63)
        self.Lb_instruction.configure(activebackground="#f9f9f9")
        self.Lb_instruction.configure(activeforeground="black")
        self.Lb_instruction.configure(background="#d9d9d9")
        self.Lb_instruction.configure(disabledforeground="#a3a3a3")
        self.Lb_instruction.configure(foreground="#000000")
        self.Lb_instruction.configure(highlightbackground="#d9d9d9")
        self.Lb_instruction.configure(highlightcolor="black")
        self.Lb_instruction.configure(text='''Instruction:''')

        self.Entry3 = Entry(self.Fr_add)
        self.Entry3.place(relx=0.38, rely=0.37,height=80, relwidth=0.39)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")

        self.rb_addbk = Radiobutton(self.Fr_add)
        self.rb_addbk.place(relx=0.82, rely=0.15, relheight=0.19, relwidth=0.14)
        self.rb_addbk.configure(activebackground="#d9d9d9")
        self.rb_addbk.configure(activeforeground="#000000")
        self.rb_addbk.configure(background="#d9d9d9")
        self.rb_addbk.configure(disabledforeground="#a3a3a3")
        self.rb_addbk.configure(foreground="#000000")
        self.rb_addbk.configure(highlightbackground="#d9d9d9")
        self.rb_addbk.configure(highlightcolor="black")
        self.rb_addbk.configure(justify=LEFT)
        self.rb_addbk.configure(text='''Breackfast''')

        self.rb_addllunch = Radiobutton(self.Fr_add)
        self.rb_addllunch.place(relx=0.8, rely=0.44, relheight=0.19
                , relwidth=0.14)
        self.rb_addllunch.configure(activebackground="#d9d9d9")
        self.rb_addllunch.configure(activeforeground="#000000")
        self.rb_addllunch.configure(background="#d9d9d9")
        self.rb_addllunch.configure(disabledforeground="#a3a3a3")
        self.rb_addllunch.configure(foreground="#000000")
        self.rb_addllunch.configure(highlightbackground="#d9d9d9")
        self.rb_addllunch.configure(highlightcolor="black")
        self.rb_addllunch.configure(justify=LEFT)
        self.rb_addllunch.configure(text='''lunch''')

        self.rb_adddinner = Radiobutton(self.Fr_add)
        self.rb_adddinner.place(relx=0.8, rely=0.3, relheight=0.19
                , relwidth=0.14)
        self.rb_adddinner.configure(activebackground="#d9d9d9")
        self.rb_adddinner.configure(activeforeground="#000000")
        self.rb_adddinner.configure(background="#d9d9d9")
        self.rb_adddinner.configure(disabledforeground="#a3a3a3")
        self.rb_adddinner.configure(foreground="#000000")
        self.rb_adddinner.configure(highlightbackground="#d9d9d9")
        self.rb_adddinner.configure(highlightcolor="black")
        self.rb_adddinner.configure(justify=LEFT)
        self.rb_adddinner.configure(text='''Dinner''')

        self.button_add = Button(self.Fr_add)
        self.button_add.place(relx=0.8, rely=0.67, height=34, width=107)
        self.button_add.configure(activebackground="#d9d9d9")
        self.button_add.configure(activeforeground="#000000")
        self.button_add.configure(background="#d8d3a8")
        self.button_add.configure(command=mlb_support.recepilist())
        self.button_add.configure(disabledforeground="#a3a3a3")
        self.button_add.configure(foreground="#000000")
        self.button_add.configure(highlightbackground="#d9d9d9")
        self.button_add.configure(highlightcolor="black")
        self.button_add.configure(pady="0")
        self.button_add.configure(text='''Add Recepi''')

        self.Frame4 = Frame(top)
        self.Frame4.place(relx=0.43, rely=0.04, relheight=0.5, relwidth=0.54)
        self.Frame4.configure(relief=GROOVE)
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief=GROOVE)
        self.Frame4.configure(background="#d9d9d9")
        self.Frame4.configure(highlightbackground="#d9d9d9")
        self.Frame4.configure(highlightcolor="black")
        self.Frame4.configure(width=325)

        self.Lb_recipe = Listbox(self.Frame4)
        self.Lb_recipe.place(relx=0.03, rely=0.36, relheight=0.59, relwidth=0.32)

        self.Lb_recipe.configure(background="white")
        self.Lb_recipe.configure(disabledforeground="#a3a3a3")
        self.Lb_recipe.configure(font="TkFixedFont")
        self.Lb_recipe.configure(foreground="#000000")
        self.Lb_recipe.configure(highlightbackground="#d9d9d9")
        self.Lb_recipe.configure(highlightcolor="black")
        self.Lb_recipe.configure(selectbackground="#c4c4c4")
        self.Lb_recipe.configure(selectforeground="black")
        self.Lb_recipe.configure(width=104)

        self.text_desc = Text(self.Frame4)
        self.text_desc.place(relx=0.43, rely=0.04, relheight=0.91, relwidth=0.54)

        self.text_desc.configure(background="white")
        self.text_desc.configure(font="TkTextFont")
        self.text_desc.configure(foreground="black")
        self.text_desc.configure(highlightbackground="#d9d9d9")
        self.text_desc.configure(highlightcolor="black")
        self.text_desc.configure(insertbackground="black")
        self.text_desc.configure(selectbackground="#c4c4c4")
        self.text_desc.configure(selectforeground="black")
        self.text_desc.configure(width=174)
        self.text_desc.configure(wrap=WORD)

        self.rb_breakfast = Radiobutton(self.Frame4)
        self.rb_breakfast.place(relx=0.06, rely=0.04, relheight=0.11
                , relwidth=0.25)
        self.rb_breakfast.configure(activebackground="#d9d9d9")
        self.rb_breakfast.configure(activeforeground="#000000")
        self.rb_breakfast.configure(background="#d9d9d9")
        self.rb_breakfast.configure(disabledforeground="#a3a3a3")
        self.rb_breakfast.configure(foreground="#000000")
        self.rb_breakfast.configure(highlightbackground="#d9d9d9")
        self.rb_breakfast.configure(highlightcolor="black")
        self.rb_breakfast.configure(justify=LEFT)
        self.rb_breakfast.configure(text='''breackfast''')

        self.rb_lunch = Radiobutton(self.Frame4)
        self.rb_lunch.place(relx=0.06, rely=0.13, relheight=0.11, relwidth=0.18)
        self.rb_lunch.configure(activebackground="#d9d9d9")
        self.rb_lunch.configure(activeforeground="#000000")
        self.rb_lunch.configure(background="#d9d9d9")
        self.rb_lunch.configure(disabledforeground="#a3a3a3")
        self.rb_lunch.configure(foreground="#000000")
        self.rb_lunch.configure(highlightbackground="#d9d9d9")
        self.rb_lunch.configure(highlightcolor="black")
        self.rb_lunch.configure(justify=LEFT)
        self.rb_lunch.configure(text='''lunch''')

        self.rb_dinner = Radiobutton(self.Frame4)
        self.rb_dinner.place(relx=0.06, rely=0.22, relheight=0.11, relwidth=0.19)

        self.rb_dinner.configure(activebackground="#d9d9d9")
        self.rb_dinner.configure(activeforeground="#000000")
        self.rb_dinner.configure(background="#d9d9d9")
        self.rb_dinner.configure(disabledforeground="#a3a3a3")
        self.rb_dinner.configure(foreground="#000000")
        self.rb_dinner.configure(highlightbackground="#d9d9d9")
        self.rb_dinner.configure(highlightcolor="black")
        self.rb_dinner.configure(justify=LEFT)
        self.rb_dinner.configure(text='''Dinner''')






if __name__ == '__main__':
    vp_start_gui()


